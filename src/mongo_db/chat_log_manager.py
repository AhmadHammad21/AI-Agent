from datetime import datetime, timezone
from typing import List, Dict, Optional

class ChatLogManager:
    def __init__(self, mongo_conn, db_client, collection_name):
        """
        Initialize the ChatLogManager with a MongoDB database and collection name.

        Collection name could be changed into a method instead of being as constructor
        """
        # Initialize MongoDB client and collection using Motor
        self.mongo_conn = mongo_conn
        self.db_client = db_client
        self.collection = self.db_client[collection_name]

    async def insert_or_update_chat_log(
        self,
        user_id: str,
        session_id: str,
        messages: List[str]
    ):
        """
        Append messages to an existing chat session, or insert a new session if not found.

        Args:
            user_id (str): The user ID
            session_id (str): The session ID
            query_message (str): The query message sent by the user
            rag_response (str): The response generated by the RAG model
            full_prompt (str): The full prompt used in the RAG model for context
        """

        # Filter to find the session by user_id and session_id
        document_filter = {"user_id": user_id, "session_id": session_id}
        
        # Update document with new messages
        update_doc = {
            "$setOnInsert": {
                "timestamp": datetime.now(timezone.utc),
                "user_id": user_id,
                "session_id": session_id
            },
            "$push": {
                "messages": {
                    "$each": messages
                }
            }
        }

        try:
            # Update the session or insert a new one if not found
            result = await self.collection.update_one(
                filter=document_filter,
                update=update_doc,
                upsert=True  # Create if it doesn't exist
            )

            if result.matched_count:
                print(f"✅ Appended message to existing chat for user {user_id}, session {session_id}")
            else:
                print(f"✅ Created new chat log for user {user_id}, session {session_id}")
        except Exception as e:
            print(f"❌ Failed to update or insert chat log: {e}")

    async def get_chat_history(self, user_id: str, session_id: str) -> Optional[List[Dict]]:
        """
        Fetch the chat history for a given user_id and session_id.

        Args:
            user_id (str): The user ID
            session_id (str): The session ID

        Returns:
            List[Dict]: A list of messages for the specified chat session, or None if not found.
        """
        # Filter to find the chat history by user_id and session_id
        document_filter = {"user_id": user_id, "session_id": session_id}
        
        try:
            # Retrieve the document from the collection
            document = await self.collection.find_one(document_filter)

            if document:
                # Return the messages from the chat history
                return document.get("messages", [])
            else:
                print(f"❌ No chat history found for user {user_id}, session {session_id}")
                return None
        except Exception as e:
            print(f"❌ Failed to retrieve chat history: {e}")
            return None
