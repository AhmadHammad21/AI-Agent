import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv
from datetime import datetime, timezone


load_dotenv()
# Replace with your actual values
username = "admin"
password = "admin"
host = "34.173.119.32"   # External IP of your GCP VM
port = 27017
auth_db = "admin"        # Typically "admin" or the database where the user was created

# uri = f"mongodb://{username}:{password}@{host}:{port}/?authSource={auth_db}"
MONGODB_URL= os.environ["MONGODB_URL"]#"mongodb://admin:admin@localhost:27017/"

client = AsyncIOMotorClient(MONGODB_URL)

db_name = os.environ["MONGODB_DATABASE"]
db = client[db_name]

print("db")
collection_name = "chatbot"
collection = db[collection_name]

async def insert_chat_log(user_id: str, session_id: str, messages: list):
    """
    Insert a chat session into the chatbot collection.
    
    Args:
        session_id (str): Unique identifier for the chat session
        messages (list): List of message dicts like {'role': 'user', 'content': 'Hello'}
    """
    document = {
        "user_id": user_id,
        "session_id": session_id,
        "timestamp": datetime.now(timezone.utc),
        "messages": messages
    }
    try:
        result = await collection.insert_one(document)
        print(f"✅ Chat log inserted with _id: {result.inserted_id}")
    except Exception as e:
        print(f"❌ Failed to insert chat log: {e}")


async def insert_or_update_chat_log(user_id: str, session_id: str, query_message: str, rag_response: str, full_prompt: str):
    """
    Append messages to an existing chat session, or insert a new session if not found.

    Args:
        user_id (str): The user ID
        session_id (str): The session ID
        query_message (str): The query message sent by the user
        rag_response (str): The response generated by the RAG model
        full_prompt (str): The full prompt used in the RAG model for context
    """
    # Construct the new messages in the desired format
    messages = [
        {"role": "system", "content": "You are an AI assistant."},  # You can customize this message as needed
        {"role": "user", "content": query_message},
        {"role": "system", "content": full_prompt},  # Storing the full prompt used for the RAG response
        {"role": "assistant", "content": rag_response}
    ]

    # Filter to find the session by user_id and session_id
    document_filter = {"user_id": user_id, "session_id": session_id}
    
    # Update document with new messages
    update_doc = {
        "$setOnInsert": {
            "timestamp": datetime.now(timezone.utc),
            "user_id": user_id,
            "session_id": session_id
        },
        "$push": {
            "messages": {
                "$each": messages
            }
        }
    }

    try:
        # Update the session or insert a new one if not found
        result = await collection.update_one(
            filter=document_filter,
            update=update_doc,
            upsert=True  # Create if it doesn't exist
        )

        if result.matched_count:
            print(f"✅ Appended message to existing chat for user {user_id}, session {session_id}")
        else:
            print(f"✅ Created new chat log for user {user_id}, session {session_id}")
    except Exception as e:
        print(f"❌ Failed to update or insert chat log: {e}")


# Example input data
user_id = "user123"
session_id = "session456"
# query_message = "What is the best health insurance plan for families?"
# rag_response = "The best health insurance plan for families typically includes coverage for hospital visits, prescriptions, and preventive care. Some well-regarded options include XYZ Insurance's Family Plan."
# full_prompt = "Provide the best health insurance plan options for families based on coverage and cost."

# Example follow-up input data
query_message = "What are the premium costs for these plans?"
rag_response = "The premium costs for XYZ Insurance’s Family Plan typically range from $200 to $350 per month depending on coverage levels."
full_prompt = "Provide the premium costs for the mentioned health insurance plans."

# Call the function to insert the message
asyncio.run(insert_or_update_chat_log(user_id, session_id, query_message, rag_response, full_prompt))